package queen
/*
给你一个整数数组nums,有一个大小为K的窗口，从数组的最左端移动到最右端，
你只可以看到在窗口的中K个数，每次向右移动一位，返回滑动窗口的中的最大值

示例 1：

输入：nums = [1,3,-1,-3,5,3,6,7], k = 3
输出：[3,3,5,5,6,7]
解释：
滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

*/

/*
实现一个单调栈的核心思想
1. 维护一个单调递减的队列，双端队列
2. 每次从队尾添加元素的时候，判断队列中中小于当前元素的全部弹出，谁能力强谁上，不分时间先后顺序

*/
type CustomQueue struct{
	queue []int
}

func CustomQueue() *CustomQueue{
	return &CustomQueue{
		
	}
}

func maxSlidingWindow(nums []int, k int) []int {
	
}